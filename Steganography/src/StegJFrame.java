
import java.awt.Image;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
/*
<applet code="Login.class" width=900  height=1000>
</applet>
*/
/**
 *
 * @author abhijit
 */
public class StegJFrame extends javax.swing.JFrame {
    
    
    

    /**
     * Creates new form StegJFrame
     */
    public StegJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EncodeText = new javax.swing.JTextField();
        DecodedText = new javax.swing.JTextField();
        ImgDisplay = new javax.swing.JLabel();
        EncodeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        DecodeButton = new javax.swing.JButton();
        ClearEncodeText = new javax.swing.JButton();
        EncodeImgLoc = new javax.swing.JTextField();
        DecodeImgLoc = new javax.swing.JTextField();
        ChooseEncodeLoc = new javax.swing.JButton();
        ChooseDecodeLoc = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ClearDecodedText = new javax.swing.JButton();
        HelpEncode = new javax.swing.JButton();
        HelpDecode = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Current = new javax.swing.JTextArea();
        Exit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ClearAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        EncodeText.setToolTipText("");
        EncodeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodeTextActionPerformed(evt);
            }
        });

        DecodedText.setEditable(false);
        DecodedText.setText(" ");
        DecodedText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        DecodedText.setDoubleBuffered(true);
        DecodedText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodedTextActionPerformed(evt);
            }
        });

        EncodeButton.setBackground(new java.awt.Color(220, 20, 60));
        EncodeButton.setText("Encode");
        EncodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodeButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter the text to be inserted:");

        jLabel2.setText("The extracted text is:");

        DecodeButton.setBackground(new java.awt.Color(34, 139, 34));
        DecodeButton.setText("Decode");
        DecodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodeButtonActionPerformed(evt);
            }
        });

        ClearEncodeText.setBackground(new java.awt.Color(0, 255, 255));
        ClearEncodeText.setText("Clear text");
        ClearEncodeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearEncodeTextActionPerformed(evt);
            }
        });

        EncodeImgLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodeImgLocActionPerformed(evt);
            }
        });

        ChooseEncodeLoc.setBackground(new java.awt.Color(0, 255, 255));
        ChooseEncodeLoc.setText("Choose");
        ChooseEncodeLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseEncodeLocActionPerformed(evt);
            }
        });

        ChooseDecodeLoc.setBackground(new java.awt.Color(0, 255, 255));
        ChooseDecodeLoc.setText("Choose");
        ChooseDecodeLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseDecodeLocActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setText("ENCODE");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setText("DECODE");

        ClearDecodedText.setBackground(new java.awt.Color(0, 255, 255));
        ClearDecodedText.setText("Clear text");
        ClearDecodedText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearDecodedTextActionPerformed(evt);
            }
        });

        HelpEncode.setBackground(new java.awt.Color(255, 165, 0));
        HelpEncode.setText("Help");
        HelpEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpEncodeActionPerformed(evt);
            }
        });

        HelpDecode.setBackground(new java.awt.Color(255, 165, 0));
        HelpDecode.setText("Help");
        HelpDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpDecodeActionPerformed(evt);
            }
        });

        Current.setColumns(20);
        Current.setRows(5);
        Current.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Current.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        Current.setDoubleBuffered(true);
        Current.setEnabled(false);
        jScrollPane1.setViewportView(Current);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel5.setText("Selected Image:");

        jLabel6.setText("Debugging window:");

        ClearAll.setText("Clear all");
        ClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(EncodeImgLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ChooseEncodeLoc))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(EncodeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(HelpEncode))
                                            .addComponent(EncodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ClearEncodeText, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(ClearAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGap(31, 31, 31))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(353, 353, 353)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel6))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ImgDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(DecodeButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(HelpDecode)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(DecodedText, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ClearDecodedText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(DecodeImgLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(ChooseDecodeLoc)))
                            .addComponent(jLabel5))
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EncodeImgLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChooseEncodeLoc)
                            .addComponent(DecodeImgLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChooseDecodeLoc))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EncodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClearEncodeText)
                            .addComponent(ClearDecodedText)
                            .addComponent(DecodedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(EncodeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(HelpEncode, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DecodeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(HelpDecode, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ImgDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DecodedTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodedTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DecodedTextActionPerformed

    private void EncodeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodeTextActionPerformed
        
    }//GEN-LAST:event_EncodeTextActionPerformed

    private void EncodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodeButtonActionPerformed
       
            //Getting file location 
             String FileLoc=EncodeImgLoc.getText();
             
             //Debugging window
             if(!FileLoc.isEmpty())
             {
             Current.append("The chosen file is:"+FileLoc+"\n");
                 
             Current.append("Encoding message onto the photo.....\n");
             
            //creating object of class Steganography
             Steganography stego = new Steganography();
             
             //Getting message
             String Message = EncodeText.getText();
             
             //Encoding
             stego.encode(FileLoc, Message);
             
             //Successful encoding
             Current.append("The text has been successfully encoded onto the selected photo\n");
             }
             else
             {
                 Current.append("File not chosen\n");
                
             }
             
            
        
        
    }//GEN-LAST:event_EncodeButtonActionPerformed

    private void DecodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodeButtonActionPerformed
        
            //Getting file location 
            String filename=DecodeImgLoc.getText();
             
            //Debugging window
             if(!filename.isEmpty())
             {
             Current.append("The chosen file is:"+filename+"\n");
                 
             //creating object of class Steganography
            Steganography steg = new Steganography();
             
            //Getting message
            String output= steg.decode(filename);
            
            //printing message
            DecodedText.setText(output);
            
            //Successful decoding
            Current.append("The decoded data has been successfully displayed\n");
             
             }
             else
             {
                 Current.append("File not chosen\n");
             }
             
            
        
    }//GEN-LAST:event_DecodeButtonActionPerformed

    private void EncodeImgLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodeImgLocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EncodeImgLocActionPerformed

    private void ChooseEncodeLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseEncodeLocActionPerformed
        Current.setText("");
        
        //Creating object of type filechooser
        JFileChooser fChooser = new JFileChooser();

        //Limit type of file name extensions supported.
        FileNameExtensionFilter filter = new FileNameExtensionFilter("4 Extensions Supported", "jpg", "png", "jpeg", "gif");
        
        //Applying filter
        fChooser.setFileFilter(filter);

        int selected = fChooser.showOpenDialog(null);

        //check if open button has been clicked.
        if (selected == JFileChooser.APPROVE_OPTION) {

            File file = fChooser.getSelectedFile();

            //Getting Path of the selected image.
            String getselectedImage = file.getAbsolutePath();

            //Creating object to store image in type imageicon
            ImageIcon imIco = new ImageIcon(getselectedImage);

            //make image fit on jlabel.
            Image imFit = imIco.getImage();

            //modifying object on the basis of the jLabel
            Image imgFit = imFit.getScaledInstance(ImgDisplay.getWidth(), ImgDisplay.getHeight(), Image.SCALE_SMOOTH);

            //COnverting image back to its imageicon form in order to print it onto the jLabel
            ImgDisplay.setIcon(new ImageIcon(imgFit));

            //Getting file location and printing it 
            String filename=file.getAbsolutePath();
             
             EncodeImgLoc.setText(filename);
             
             
        }
    }//GEN-LAST:event_ChooseEncodeLocActionPerformed

    private void ClearEncodeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearEncodeTextActionPerformed
        EncodeText.setText("");
        Current.append("The text field has been cleared\n");
           
    }//GEN-LAST:event_ClearEncodeTextActionPerformed

    private void ClearDecodedTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearDecodedTextActionPerformed
         DecodedText.setText("");
          Current.append("The text field has been cleared\n");
    }//GEN-LAST:event_ClearDecodedTextActionPerformed

    private void ChooseDecodeLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseDecodeLocActionPerformed
        Current.setText("");
        
        //Creating object of type filechooser
        JFileChooser fileChooser = new JFileChooser();

        //Limit type of file name extensions supported.
        FileNameExtensionFilter filter = new FileNameExtensionFilter("4 Extensions Supported", "jpg", "png", "jpeg", "gif");

        //Applying filter
        fileChooser.setFileFilter(filter);

        int selected = fileChooser.showOpenDialog(null);

        //check if button has been clicked.
        if (selected == JFileChooser.APPROVE_OPTION) {

            File file = fileChooser.getSelectedFile();

            //Getting Path of the selected image
            String getselectedImage = file.getAbsolutePath();
            
            //Creating object to store image in type imageicon
            ImageIcon imIco = new ImageIcon(getselectedImage);

            //make image fit on jlabel.
            Image imFit = imIco.getImage();

            //modifying object on the basis of the jLabel
            Image imgFit = imFit.getScaledInstance(ImgDisplay.getWidth(), ImgDisplay.getHeight(), Image.SCALE_SMOOTH);

            //COnverting image back to its imageicon form in order to print it onto the jLabel
            ImgDisplay.setIcon(new ImageIcon(imgFit));

             //Getting file location and printing it 
            String filename=file.getAbsolutePath();
             
             DecodeImgLoc.setText(filename);
             
        }
    }//GEN-LAST:event_ChooseDecodeLocActionPerformed

    private void HelpEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpEncodeActionPerformed
        JOptionPane.showMessageDialog(null, "1. Select the image using choose button\n2. Enter the text in the given field\n3. Click on encode\nYour trext has now been encoded onto that image");
    }//GEN-LAST:event_HelpEncodeActionPerformed

    private void HelpDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpDecodeActionPerformed
        JOptionPane.showMessageDialog(null, "1. Select the image using choose button\n2. Click on Decode\nThe decoded text will now be shown");
                                            
    }//GEN-LAST:event_HelpDecodeActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void ClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllActionPerformed
        //Clearing every field
        EncodeText.setText("");
        DecodedText.setText("");
        EncodeImgLoc.setText("");
        DecodeImgLoc.setText("");
        Current.setText("");
        ImgDisplay.setIcon(null);
    }//GEN-LAST:event_ClearAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StegJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StegJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StegJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StegJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StegJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseDecodeLoc;
    private javax.swing.JButton ChooseEncodeLoc;
    private javax.swing.JButton ClearAll;
    private javax.swing.JButton ClearDecodedText;
    private javax.swing.JButton ClearEncodeText;
    private javax.swing.JTextArea Current;
    private javax.swing.JButton DecodeButton;
    private javax.swing.JTextField DecodeImgLoc;
    private javax.swing.JTextField DecodedText;
    private javax.swing.JButton EncodeButton;
    private javax.swing.JTextField EncodeImgLoc;
    private javax.swing.JTextField EncodeText;
    private javax.swing.JButton Exit;
    private javax.swing.JButton HelpDecode;
    private javax.swing.JButton HelpEncode;
    private javax.swing.JLabel ImgDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
